<?php

/**
 * @file
 *
 * Module file for Queues.
 */

// Load our classes and helper functions.
// Yes we just blatantly load them because entity api
// is being silly.
include_once 'queues.entity.inc';
include_once 'queues.type.entity.inc';
include_once 'queues.admin.inc';

 /**
  * Implements hook_entity_info().
  */
function queues_entity_info() {

  $info = array(
    'queues' => array(
      'label' => t('Queue'),
      'plural label' => t('Queues'),
      'entity class' => 'QueueEntity',
      'controller class' => 'EntityAPIController',
      'base table' => 'queues',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'qid',
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'queue_entity_access',
      'module' => 'queues',
      'view modes' => array(),
      'admin ui' => array(
        'path' => 'admin/content/queues',
        'controller class' => 'QueueEntityUIController',
      ),
    ),

    // Set up another entity to use for storage as the bundle for queues
    'queues_type' => array(
      'label' => t('Queue type'),
      'plural label' => t('Queues'),
      'entity class' => 'QueueEntityType',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'queues_type',
      'fieldable' => FALSE,
      'bundle of' => 'queues',
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'name' => 'type',
      ),
      'module' => 'queues',
      'label callback' => 'entity_class_label',
      'access callback' => 'queues_type_access',
      'admin ui' => array(
        'path' => 'admin/structure/queues',
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the queues_type types.
 */
function queues_entity_info_alter(&$entity_info) {
  foreach (queues_type_get_types() as $type => $info) {
    $entity_info['queues']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/queues/manage/%queues_type',
        'real path' => 'admin/structure/queues/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer queue types'),
      ),
    );
  }
}


/**
 * Implements hook_permission().
 */
function queues_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer queue types' => array(
      'title' => t('Administer queue types'),
      'description' => t('Create and delete fields for queue types, and set their permissions.'),
    ),
    'administer queue' => array(
      'title' => t('Administer queues'),
      'description' => t('Edit and delete all queues'),
    ),
  );

  //Generate permissions per queue
  foreach (queues_type_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name queue" => array(
        'title' => t('%type_name: Edit any queue', array('%type_name' => $type->label)),
      ),
    );
  }

  return $permissions;
}

/**
 * Determines whether the given user has access to a queue.
 *
 * @param $op
 *   The operation being performed. One of 'edit', 'create', 'delete'.
 * @param $queue
 *   Optionally a queue or a queue type to check access for. If nothing is
 *   given, access for all queue is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function queue_entity_access($op = 'edit', $queue = NULL, $account = NULL) {
  if (user_access('administer queue', $account)) {
    return TRUE;
  }
  if (isset($queue) && $type_name = $queue->type) {
    // We only do edit.
    $op = 'edit';
    if (user_access("edit any $type_name queue", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function queues_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer queue types', $account);
}
